/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW MOD LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
            hold-trigger-on-release;
            flavor = "balanced";
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW MOD RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <39 40 41 36 37 38 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
            hold-trigger-on-release;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default-layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB          &kp Q  &kp W        &kp F         &kp P  &kp B        &kp J    &kp L     &kp U            &kp Y        &kp SEMI  &kp APOS
&hml LGUI MINUS  &kp A  &hml LALT R  &hml LCTRL S  &kp T  &kp G        &kp M    &kp N     &hmr LCTRL E     &hmr LALT I  &kp O     &hmr RGUI PLUS
&kp UNDERSCORE   &kp Z  &kp X        &kp C         &kp D  &kp V        &kp K    &kp H     &kp COMMA        &kp DOT      &kp FSLH  &kp EQUAL
                                     &kp LSHIFT    &mo 1  &kp SPACE    &kp RET  &kp BSPC  &hmr RSHIFT ESC
            >;
        };

        lower-layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp EXCLAMATION  &kp AT_SIGN     &kp POUND         &kp DOLLAR            &kp PERCENT    &kp CARET  &kp AMPERSAND          &kp ASTERISK       &kp EQUAL        &kp BACKSLASH  &none
&kp TILDE  &hml LGUI N1     &hml LALT N2    &hml LCTRL N3     &kp N4                &kp N5         &kp N6     &kp N7                 &hmr LCTRL N8      &hmr LALT N9     &hmr LGUI N0   &none
&none      &kp BACKSLASH    &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &none          &none      &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp PIPE       &none
                                            &kp LGUI          &none                 &kp LSHIFT     &kp RET    &mo 2                  &kp BACKSPACE
            >;
        };

        raise-layer {
            bindings = <
&kp F1          &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &kp F7    &kp F8    &kp F9  &kp F10    &kp F11  &kp F12
&none           &kp HOME      &kp END       &kp PG_UP     &kp PG_DN     &none           &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &none    &none
&bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none     &none     &none   &none      &none    &bt BT_DISC 0
                                            &none         &none         &kp LSHIFT      &none     &none     &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        for-func-layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
